//Useful commands for GitHub
How to sync from GitHub to computer: use "git clone"
How to sync from computer to GitHub:
-create an empty repository on GitHub
-create a remote repository ("remote") on computer
-->"git remote add remote_name remote_html_source"
(where usually remote_name = origin
and remote_html_source is the HTML source of the GitHub repository)
-use "git push -u remote_name branch_name" to copy branch to GitHub
(ie only and all updated nodes will be copied)
(ie "git push -u origin master")

Reflect: When to Use a Remote Repository
Q.When would you want to use a remote repository rather than keeping all your work local?
A.We can use a remote repository to share our work with others in order to collaborate, seek feedback, or show our accomplishments.

Reflect: Manual vs. automatic pull
Q. Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
A. It might not be useful to be up-to-date with the remote repository on GitHub if you have been editing a same file on your local repository.

Reflect: Forks, Clones, and Branches
Q.Describe the differences between forks, clones, and branches. When would you use one instead of another?
A. We make a new branch on a repository when we want to make changes to the main code (ie implementing a new feature) and possibly merge that change into the main body of code ("master branch") later, or just make a new version of the code (like an easy version of a game).
If we have a repository on GitHub that we want on our computer, we can make a clone of it from GitHub.
If another person has a repository on GitHub that we want to make our own version of, we can fork it on GitHub.  This is like making a new branch on their repository, but it's all on GitHub.  GitHub copies their repository onto our online profile, then links to their original repository. 

Q.What is the benefit of having a copy of the last known state of the remote stored locally?
A.When we have made changes to both the local repository and online repository (or during collaboration) the local and online versions are not in sync and we need to merge the changes each time.  However, if we always keep the last known state of the remote stored locally, changes that we make locally will be on the same branch as the remote's HEAD.  That way, when we want to update the remote/online repository, we push changes that result in a fast-forward merge.

Q.How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
A. Without using Git or GitHub would be much harder because collaboration would mean manually sending/emailing the files to another person (or multiple people!) or posting onto my own website publicly, along with a description of all the changes made. My collaborators would then need to contact me and send their changes.

Q. When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
A. Making changes in a separate branch (on GitHub) is important when we are collaborating with others and want to propose or request a new feature. Merging the changes with the master branch takes more work, so regular changes should be made directly on the master branch.
